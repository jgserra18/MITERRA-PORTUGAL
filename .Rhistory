d <- as.data.frame(l09)
View(d)
l09 <- raster('G:\\O meu disco\\MITERRA\\MITERRA-PORTUGAL\\GIS_module\\Output\\MITERRA_fractions\\f_leaching09.tif')
d <- as.data.frame(l09)
View(d)
d <- unlist(l09)
View(d)
View(d$f_leaching09)
d <- fortify(l09)
coordinates(l09)
coord <- coordinates(l09)
proj4string(coord)
crs(coord)
coord
coord <- as.data.frame(coordinates(l09))
coord
View(coord)
proj4string(coord)
proj4string(coord) <- crs(r)
proj4string(coord) <- CRS(r)
crs(r)
proj4string(coord) <- crs(' +proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs')
proj4string(coord) <- crs('+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs')
proj4string(coord) <- CRS('+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs')
proj4string(coord) <- CRS('+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs')
proj4string(coord) <- CRS(r)
head(coord)
proj4string(coord) <- CRS('+init=+etrs89')
proj4string(coord) <- CRS('+init=etrs89')
proj4string(coord) <- CRS('+init=etrs:89')
proj4string(coord) <- CRS('+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +units=m +no_defs ')
d <- spTransform(l09, CRS(r))
l09 <- raster('G:\\O meu disco\\MITERRA\\MITERRA-PORTUGAL\\GIS_module\\Output\\MITERRA_fractions\\f_leaching09.tif')
r <- raster('G:\\O meu disco\\MITERRA\\MITERRA-PORTUGAL\\GIS_module\\Output\\LandCover/caaRP09.tif')
d <- spTransform(l09, CRS(r))
d <- projection(l09, asText = T)
d
l09
ext <- extent(r)
ext <- as(ext, 'SpatialPolygons')
proj4string(ext) <- crs(r)
res(l09)/res(r)
r <- res(l09)/res(r)
l09 <- raster('G:\\O meu disco\\MITERRA\\MITERRA-PORTUGAL\\GIS_module\\Output\\MITERRA_fractions\\f_leaching09.tif')
l09 <- aggregate(l09, fac=r)
l09 <- aggregate(l09, fac=1e-4)
l09 <- aggregate(l09, fac=0.0001)
l09 <- aggregate(l09, fac=0.001)
l09 <- aggregate(l09, fact=r)
l09 <- aggregate(l09, fact=0.1)
l09 <- raster('G:\\O meu disco\\MITERRA\\MITERRA-PORTUGAL\\GIS_module\\Output\\MITERRA_fractions\\f_leaching09.tif')
d <- projection(l09, asText = T)
d
l09 <- aggregate(l09, fact=0.1)
l09 <- aggregate(l09, fact=10000)
l09 <- aggregate(l09, fact=1000)
d <- resample(l09, r)
r
r <- raster('G:\\O meu disco\\MITERRA\\MITERRA-PORTUGAL\\GIS_module\\Output\\LandCover/caaRP09.tif')
d <- resample(l09, r)
d <- resample(l09, r, validate=F)
d <- resample(l09, r, validate=T)
res(l09)/res(r)
r <- res(l09)/res(r)
lol <- aggregate(l09, fact=r)
lol <- aggregate(l09, fact=c(r[1], r[2]))
lol <- aggregate(l09, fact=0.03)
lol <- disaggregate(l09, fact=0.03)
lol <- disaggregate(l09, fact=1)
lol
l09
l09 <- raster('G:\\O meu disco\\MITERRA\\MITERRA-PORTUGAL\\GIS_module\\Output\\MITERRA_fractions\\f_leaching09.tif')
l09
lol <- disaggregate(l09, fact=10000)
lol <- aggregate(l09, fact=10000)
gc()
r <- res(l09)/res(r)
r
lol <- aggregate(l09, fact=10000)
lol <- aggregate(l09, fact=10)
l09
lol
lol <- aggregate(l09, fact=100)
lol
lol <- aggregate(l09, fact=1000)
l09 <- aggregate(l09, fact=100)
l09 <- aggregate(l09, fact=100)
l09 <- aggregate(l09, fact=10)
l09
plot(l09)
source('G:/O meu disco/MITERRA/MITERRA-PORTUGAL/set_directory.R', echo=TRUE)
library(raster)
library(rgdal)
#load GIS functions to export shapefile
source('./ExploratoryAnalysis_module/Command function/GIS_functions.R')
source('./Main_functions.R')
#get_muni_shp <- function()
#{
# muni <- load_shp('Muni')
# #standardize Muni_ID for further merges
# muni$Muni_ID <- as.character(muni$Muni_ID)
# muni$Muni_ID <- as.integer(muni$Muni_ID)
#standardize muni_shp to intersect with CAA
#muni <- spTransform(muni, crs('+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0'))
#muni <- spTransform(muni, crs('+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs'))
# return(muni)
#}
get_muni_shp <- function()
{
path <- select_GIS_output_submodule('Muni')
file_path <- file.path(path, list.files(path, pattern='shp'))
muni <- readOGR(file_path)
colnames(muni@data)[1] <- 'Muni_ID'
muni$Muni_ID <- as.character(muni$Muni_ID)
muni$Muni_ID <- as.integer(muni$Muni_ID)
ext <- c(2635900, 2977200, 1729700, 2298200)
muni <- crop(muni, ext)
return(muni)
}
#rasterize_data_muni(nleaching09, 'Muni_ID', 'leaching_nha')
rasterize_data_muni <- function(df_to_rasterize, merged_col, field_rasterize)
{
muni <- get_muni_shp()
muni <- merge(muni, df_to_rasterize,merged_col)
#create empty raster
#extent <- c(-9.491946, -6.19784, 37.00798, 42.1539)
#extent <- extent(muni)
#sr <- crs("+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs")
r <- raster(extent(muni), res=100, crs=crs(muni))#0.01)
#proj4string(r) <- sr
r <- rasterize(muni, r, field=field_rasterize, background=NA)
return(r)
}
rasterize_caa_muni <- function(caa_df, df_to_rasterize, merged_col, field_rasterize)
{
caa <- merge(caa_df, df_to_rasterize, merged_col)
# sr <- crs("+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs")
r <- raster(extent(caa_df), res=100)#0.01)
#proj4string(r) <- sr
r <- rasterize(caa, r, field=field_rasterize, background=NA)
return(r)
}
rasterize_caa <- function(year)
{
if(year==1999)
{
caa <- load_shp('CAA99_test')
}
else if (year==2009)
{
caa <- load_shp('CAA09')
}
#sr <- crs("+proj=laea +lat_0=52 +lon_0=10 +x_0=4321000 +y_0=3210000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs")
rcaa <- raster(extent(muni), res=100)#0.01)
#proj4string(rcaa) <- sr
rcaa <- rasterize(caa, rcaa, field=1, background=0)
return(rcaa)
}
#merges a muni_df of a specific field (e.g. SSNB), merges with muni_shp and intersects with the CAA scale
spatial_disagg_muni_caa <- function(df_to_merge, id_col, col_plot, year)
{
#load conditionals
ifelse(year==2009, caa <- get_GIS_file('caaRP09', 'LandCover'), caa <- get_GIS_file('caaRP99', 'LandCover'))
#merge with muni and rasterize
muni <- rasterize_data_muni(df_to_merge, id_col, col_plot)
muni_caa <- caa*muni
return(muni_caa)
}
#returns the path of a specific GIS output subfolder
#select_GIS_output_submodule('LandCover')
select_GIS_output_submodule <- function(folder_name)
{
output_path <- select_module_output('GIS')
subfolders <- list.files(output_path, pattern = folder_name)
subfolder_path <- file.path(output_path, subfolders)
return(subfolder_path)
}
#gets a specified file within a certain folder
#d <- get_GIS_file('CAA99', 'LandCover')
get_GIS_file <- function(file_pattern, folder_name)
{
subfolder_path <- select_GIS_output_submodule(folder_name)
files <- list.files(subfolder_path, pattern = file_pattern)
file_path <- file.path(subfolder_path, files)
read_file <- raster(file_path)
}
## LOAD OTHER DATA ------------------------------------------------------------------------
#write output of raster modelling
#d <- raster_modelling_subfolders('SSNB')
raster_modelling_subfolders <- function(subfolder)
{
folder_modelling <- select_GIS_output_submodule('Modelling')
subfolder_pattern <- list.files(folder_modelling, pattern=subfolder)
subfolder_path <- file.path(folder_modelling, subfolder_pattern)
return(subfolder_path)
}
raster_modelling_subfolders('SSNB')
#writes raster to a specified subfolder within GIS outputs
write_raster <- function(rasterfile, filename, subfolder, modelling)
{
ifelse(missing(modelling)==TRUE,
subfolder <- select_GIS_output_submodule(subfolder),
subfolder <- raster_modelling_subfolders(subfolder))
filename <- paste0(filename, '.tif')
file_path <- file.path(subfolder, filename)
tifoptions=c('COMPRESS=DEFLATE', 'PREDICTOR=2', 'ZLEVEL=6')
writeRaster(rasterfile, file_path, options=tifoptions)
}
write_raster_modelling <- function(rasterfile, filename, subfolder)
{
write_raster(rasterfile, filename, subfolder, 'Yes')
}
source('./Main_functions.R')
source('./GIS_module/Function/General_GIS_functions.R')
source('./Leaching_module/Function/compute_correct_surface_water_areas.R')
get_miterra_folder <- function(folder_pattern)
{
env_conditions <- select_maindata_pattern('EnvironmentalConditions')
miterra <- list.files(env_conditions, pattern='MITERRA')
miterra_path <- file.path(env_conditions, miterra)
select_folder <- list.files(miterra_path, pattern=folder_pattern)
folder_path <- file.path(miterra_path, select_folder)
return(folder_path)
}
select_files_miterra_folder <- function(folder_pattern, file_pattern)
{
folder <- get_miterra_folder(folder_pattern)
select_raster <- list.files(folder, pattern=file_pattern)
raster <- file.path(folder, select_raster)
raster <- raster(raster)
return(raster)
}
#user specifies folder e.g. ('Common') and alll the rasters within are sampled to the baseliine raster (CAA)
preProcessing_rasters <- function(folder)
{
folder <- get_miterra_folder(folder)
baseline_r <- raster('./GIS_module/Output/LandCover/caaRP09.tif')
tifoptions <- c("COMPRESS=DEFLATE", "PREDICTOR=2", "ZLEVEL=6")
files <- list.files(folder)
for (i in 1:length(files))
{
path <- file.path(folder, files[i])
r <- raster(path)
rr <- resample(baseline_r)
writeRaster(rr, path, overwrite=T, format='GTiff', options=tifoptions)
}
}
get_YearSpecific_raster <- function(year, raster_pattern)
{
year <- as.character(year)
select_raster <- select_files_miterra_folder(year,raster_pattern)
return(select_raster)
}
#condition to write or return raster output
write_raster_condition <- function(year, raster, write, name)
{
name <- paste0(name, year_prefix(year))
ifelse(write==T,
write_raster(raster, name, 'MITERRA_fractions'),
return(raster))
}
##min = prec surplus * depthRock * soiltype_runoff
compute_Rf_min <- function(year)
{
prec_surplus <- get_YearSpecific_raster(year, 'prec_surplus')
depth_rock <- select_files_miterra_folder('Common', 'DepthRock')
rf_soiltype <- select_files_miterra_folder('Common', 'Rf_soiltype_runoff')
rf_min <- min(prec_surplus,depth_rock,rf_soiltype)
return(rf_min)
}
#slope x LU
compute_Rf <- function(year, write)
{
rf_min <- compute_Rf_min(year)
slope <- select_files_miterra_folder('Common', 'Slope')
lu <- select_files_miterra_folder('Common', 'Rf_LU')
rf <- (rf_min*slope*lu)/1000000
write_raster_condition(year, rf, write, 'Rf')
}
#(rc_root, rc_Lf_PS, rc_t99, rc_OC)
compute_Lf_min <- function(year)
{
oc <- select_files_miterra_folder('Common', 'Lf_OC')
root <- select_files_miterra_folder('Common', 'Lf_root')
temp <- get_YearSpecific_raster(year, 'Lf_temp')
prec_surplus_soil <- get_YearSpecific_raster(year, 'Lf_PrecSurplus')
lf_min <- min(oc, root, temp, prec_surplus_soil)
rm(list = c('oc', 'root', 'temp', 'prec_surplus_soil'))
return(lf_min)
}
compute_Lf(1999, T)
# rc_texture*rc_LU/100*Lf_min99/100
compute_Lf <- function(year, write)
{
lf_min <- compute_Lf_min(year)
texture <- select_files_miterra_folder('Common', 'Lf_SoilType')
lu <- select_files_miterra_folder('Common', 'Lf_LU')
lf <- (lf_min*texture*lu)/1000000
write_raster_condition(year, lf, write, 'Lf')
}
#this doesn't work
#function to write them raster files
write_runoff_leaching_fractions <- function()
{
year <- c(1999, 2009)
write_raster <- sapply(year, function(x)
{
compute_Rf(x, TRUE)
compute_Lf(x, TRUE)
}
)
}
precProcess_allfolders <- function()
{
folders <- c('Common', '1999', '2009')
pre_process <- sapply(folders, function(x) preProcessing_rasters(x))
}
#load ssnb at the municipality scale (kg N/Ha)
#whole_df can be T (all cols) or F (only last col)
load_ssnb_muni <- function(year, whole_df, tier_ssnb)
{
pattern = c('Other_N_balances', 'SSNB')
ssnb_df <- select_output_data(pattern, year, tier_ssnb)
ifelse(whole_df==TRUE,
ssnb_df <- cbind(create_main_csv(),
ssnb_df),
ssnb_df)
ssnb_df <- correct_ncol_neative_to_zero(ssnb_df)
return(ssnb_df)
}
d <- load_ssnb_muni(2009, T, 'tier2_irrig')
View(d)
#tier_ssnb can be either tier2_irrig or tier2_ssnb
get_ssnb_data <- function(year, tier_ssnb)
{
load_ssnb_muni(year, TRUE, tier_ssnb)
}
## test #####
ssnb09 <- get_ssnb_data(2009, 'tier2_ssnb')
raster_ssnb_caa <- function(year, tier_ssnb)
{
ifelse(year==2009, caa <- get_GIS_file('caaRP09', 'LandCover'), caa <- get_GIS_file('caaRP99', 'LandCover'))
ssnb <- get_ssnb_data(year, tier_ssnb)
r_ssnb <- rasterize_data_muni(ssnb,'Muni_ID', 'ssnb')
ssnb_caa <- r_ssnb*caa
write_raster_modelling(ssnb_caa, paste0('ssnb', year_prefix(year)), 'SSNB')
}
raster_ssnb_caa <- function(year, tier_ssnb)
{
ifelse(year==2009, caa <- get_GIS_file('caaRP09', 'LandCover'), caa <- get_GIS_file('caaRP99', 'LandCover'))
ssnb <- get_ssnb_data(year, tier_ssnb)
print('Starting to rasterize the data----')
r_ssnb <- rasterize_data_muni(ssnb,'Muni_ID', 'ssnb')
print('Now computing the cropland SSNB----')
ssnb_caa <- r_ssnb*caa
write_raster_modelling(ssnb_caa, paste0('ssnb', year_prefix(year)), 'SSNB')
}
raster_ssnb_caa <- function(year, tier_ssnb, write)
{
ifelse(year==2009, caa <- get_GIS_file('caaRP09', 'LandCover'), caa <- get_GIS_file('caaRP99', 'LandCover'))
ssnb <- get_ssnb_data(year, tier_ssnb)
print('Starting to rasterize the data----')
r_ssnb <- rasterize_data_muni(ssnb,'Muni_ID', 'ssnb')
print('Now computing the cropland SSNB----')
ssnb_caa <- r_ssnb*caa
ifelse(write==T,
write_raster_modelling(ssnb_caa, paste0('ssnb', year_prefix(year)), 'SSNB'),
return(ssnb_caa))
}
raster_ssnb_caa <- function(year, tier_ssnb, write)
{
ifelse(year==2009, caa <- get_GIS_file('caaRP09', 'LandCover'), caa <- get_GIS_file('caaRP99', 'LandCover'))
ssnb <- get_ssnb_data(year, tier_ssnb)
print('Starting to rasterize the data----')
r_ssnb <- rasterize_data_muni(ssnb,'Muni_ID', 'ssnb')
print('Now computing the cropland SSNB----')
ssnb_caa <- r_ssnb*caa
ifelse(write==T,
write_raster_modelling(ssnb_caa, paste0('ssnb', year_prefix(year)), 'SSNB'),
return(ssnb_caa))
}
d <- raster_ssnb_caa(2009, 'tier2_irrig', F)
raster_ssnb_caa <- function(year, tier_ssnb, write)
{
ifelse(year==2009, caa <- get_GIS_file('caaRP09', 'LandCover'), caa <- get_GIS_file('caaRP99', 'LandCover'))
ssnb <- get_ssnb_data(year, tier_ssnb)
print('Starting to rasterize the data----')
r_ssnb <- rasterize_data_muni(ssnb,'Muni_ID', 'ssnb')
print('Now computing the cropland SSNB----')
ssnb_caa <- r_ssnb*caa
if(write==T)
{
write_raster_modelling(ssnb_caa, paste0('ssnb', year_prefix(year)), 'SSNB')
}
else
{
return(ssnb_caa)
}
}
d <- raster_ssnb_caa(2009, 'tier2_irrig', F)
raster_ssnb_caa <- function(year, tier_ssnb, write)
{
caa <- get_GIS_file(paste0('caaRP', year_prefix(year)), 'LandCover')
ssnb <- get_ssnb_data(year, tier_ssnb)
print('Starting to rasterize the data----')
r_ssnb <- rasterize_data_muni(ssnb,'Muni_ID', 'ssnb')
print('Now computing the cropland SSNB----')
ssnb_caa <- r_ssnb*caa
if(write==T)
{
write_raster_modelling(ssnb_caa, paste0('ssnb', year_prefix(year)), 'SSNB')
}
else
{
return(ssnb_caa)
}
}
d <- raster_ssnb_caa(2009, 'tier2_irrig', F)
plot(d)
raster_ssnb_caa <- function(year, tier_ssnb, write)
{
caa <- get_GIS_file(paste0('caaRP', year_prefix(year)), 'LandCover')
ssnb <- get_ssnb_data(year, tier_ssnb)
print('Starting to rasterize the data----')
r_ssnb <- rasterize_data_muni(ssnb,'Muni_ID', 'ssnb')
print('Now computing the cropland SSNB----')
ssnb_caa <- r_ssnb*caa
ifelse(write==T,
write_raster_modelling(ssnb_caa, paste0('ssnb', year_prefix(year)), 'SSNB'),
return(ssnb_caa))
}
d <- raster_ssnb_caa(2009, 'tier2_irrig', F)
folder <- raster_modelling_subfolders('SSNB')
folder
list.files(folder)
get_ssnb_raster <- function(filename)
{
folder <- raster_modelling_subfolders('SSNB')
file <- list.files(folder, pattern = filename)
file_path <- file.path(folder, file)
r <- raster(file_path)
}
#note: total N-leaching (kg N/ha)
compute_leaching_caa <- function(ssnb_filename, year)
{
ssnb <- get_ssnb_raster(filename)
lf09 <- get_GIS_file(paste0('Lf', year_prefix(year)), 'MITERRA')
leaching <- ssnb*lf09
return(leaching)
}
#note: total N-leaching (kg N/ha)
compute_leaching_caa <- function(ssnb_filename, year)
{
ssnb <- get_ssnb_raster(filename)
lf09 <- get_GIS_file(paste0('Lf', year_prefix(year)), 'MITERRA')
leaching <- ssnb*lf09
return(leaching)
}
d <- compute_leaching_caa('ssnb09', 2009)
folder <- raster_modelling_subfolders('SSNB')
file <- list.files(folder, pattern = 'ssnb09')
file
file_path <- file.path(folder, file)
file_path
r <- raster(file_path)
plot(r)
compute_leaching_caa('ssnb09', year)
compute_leaching_caa('ssnb09.tif', year)
get_ssnb_raster('ssnb09.tif')
#loads rasterized SSNB
get_ssnb_raster <- function(filename)
{
folder <- raster_modelling_subfolders('SSNB')
file <- list.files(folder, pattern = filename)
file_path <- file.path(folder, file)
r <- raster(file_path)
return(r)
}
get_ssnb_raster('ssnb09.tif')
plot(get_ssnb_raster('ssnb09.tif'))
#loads rasterized SSNB
get_ssnb_raster <- function(filename)
{
folder <- raster_modelling_subfolders('SSNB')
file <- list.files(folder, pattern = filename)
file_path <- file.path(folder, file)
r <- raster(file_path)
}
#note: total N-leaching (kg N/ha)
compute_leaching_caa <- function(ssnb_filename, year)
{
ssnb <- get_ssnb_raster(ssnb_filename)
lf09 <- get_GIS_file(paste0('Lf', year_prefix(year)), 'MITERRA')
leaching <- ssnb*lf09
return(leaching)
}
d <- compute_leaching_caa('ssnb09', 2009)
plot8d
plot(d)
#note: total N-leaching (kg N/ha)
compute_leaching_caa <- function(ssnb_filename, year, write)
{
ssnb <- get_ssnb_raster(ssnb_filename)
lf09 <- get_GIS_file(paste0('Lf', year_prefix(year)), 'MITERRA')
leaching <- ssnb*lf09
write_raster_modelling(leaching, paste0('leaching', year_prefix(year)), 'Leaching')
}
d <- compute_leaching_caa('ssnb09', 2009)
d
d[d<0] <- 0
d[d<0]== 0
d[d<0]
